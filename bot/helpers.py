import datetime
import io, csv
from typing import Iterable

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from .order_states import OrderState
from .keyboards import main_kb, drink_kb, resume_or_cancel_kb
from .catalog import DRINKS, SIZES

async def send_home(msg: Message) -> None:
    """
    –î–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω: –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–º + –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    drinks_text = "\n".join(DRINKS.values())
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫–æ—Ñ–µ–π–Ω—ã–π –±–æ—Ç-–±–∞—Ä–∏—Å—Ç–∞ ‚òïÔ∏è\n\n"
        "*–ú–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤:*\n"
        f"{drinks_text}\n\n"
        "–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? –ñ–º–∏ ¬´üßæ –ó–∞–∫–∞–∑¬ª.",
        reply_markup=main_kb(),
        parse_mode="Markdown",
    )
async def start_order_flow(msg: Message, state: FSMContext) -> None:
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –ø–æ –∫–Ω–æ–ø–∫–µ ¬´üßæ –ó–∞–∫–∞–∑¬ª –∏–ª–∏ –ø–æ /order.
    –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî –ø—Ä–æ—Å–∏–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å.
    """
    current_state = await state.get_state()
    if current_state:
        await msg.answer(
            "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—Å—Ç—å *–Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑*!\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:",
            reply_markup=resume_or_cancel_kb(),
            parse_mode="Markdown",
        )
        return

    await state.set_state(OrderState.drink)
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–∫–∞–∑ üéâ\n\n‚Ä¢ –ß—Ç–æ –±—É–¥–µ—à—å –ø–∏—Ç—å?",
                     reply_markup=drink_kb())
def render_order_md(item: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞ –≤ Markdown –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏."""
    drink = DRINKS.get(item["drink"], str(item["drink"]).title())
    size  = SIZES.get(item["size"],  str(item["size"]).title())
    milk  = "–î–æ–±–∞–≤–∏—Ç—å" if item.get("milk") == "yes" else "–ë–µ–∑ –º–æ–ª–æ–∫–∞"

    return (
        "üì¶ *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞*\n\n"
        f"‚òï –ù–∞–ø–∏—Ç–æ–∫: *{drink}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: *{size}*\n"
        f"ü•õ –ú–æ–ª–æ–∫–æ: *{milk}*\n\n"
        f"ID: *#{item['id']}* ¬∑ `{item['ts']}`"
    )

def iso_from_epoch(sec: int) -> str:
    return datetime.datetime.fromtimestamp(int(sec), tz=datetime.timezone.utc)\
        .isoformat(timespec="seconds")

def render_order_md_from_db(row: dict) -> str:
    oid, drink, size, milk, created = row
    drink_name = DRINKS.get(drink, drink.title())
    size_name = SIZES.get(size, size.title())
    milk_txt = "–î–æ–±–∞–≤–∏—Ç—å" if milk == "yes" else "–ë–µ–∑ –º–æ–ª–æ–∫–∞"
    ts_iso = iso_from_epoch(created)

    return (
        "üì¶ *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞*\n\n"
        f"‚òï –ù–∞–ø–∏—Ç–æ–∫: *{drink_name}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: *{size_name}*\n"
        f"ü•õ –ú–æ–ª–æ–∫–æ: *{milk_txt}*\n\n"
        f"ID: *#{oid}* ¬∑ `{ts_iso}`"
    )

def period_bounds(tag_or_from: str | None = None, to: str | None = None) -> tuple[int, int]:
    now = datetime.datetime.now(datetime.timezone.utc)
    today0 = now.replace(hour=0, minute=0, second=0, microsecond=0)

    if tag_or_from == "today":
        start = today0
        end = today0 + datetime.timedelta(days=1)

    elif tag_or_from == "week":
        start = today0 - datetime.timedelta(days=now.weekday())
        end = start + datetime.timedelta(days=7)

    elif tag_or_from == "month":
        start = today0.replace(day=1)
        if start.month == 12:
            end = start.replace(year=start.year + 1, month=1)
        else:
            end = start.replace(month=start.month + 1)

    elif (tag_or_from and to
            and len(tag_or_from) == 10 and len(to) == 10):
        y1, m1, d1 = map(int, tag_or_from.split("-"))
        y2, m2, d2 = map(int, to.split("-"))
        start = datetime.datetime(y1, m1, d1, tzinfo=datetime.timezone.utc)
        end = datetime.datetime(y2, m2, d2, tzinfo=datetime.timezone.utc) + datetime.timedelta(days=1)

    else:
        start = today0.replace(day=1)
        end = (start.replace(year=start.year + 1, month=1)
               if start.month == 12 else start.replace(month=start.month + 1))

    return int(start.timestamp()), int(end.timestamp())

def orders_to_csv(rows: Iterable[tuple]) -> bytes:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç rows = [(id, drink, size, milk, created_at), ...]
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã CSV –≤ UTF-8.
    """
    buf = io.StringIO(newline="")  # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
    w = csv.writer(buf)

    w.writerow(["id", "created_at", "drink", "size", "milk"])  # <-- –ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—à—å —Ç–∞–∫ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å

    for r in rows:
        oid, drink, size, milk, created = r
        iso_from_epoch(created)
        created_iso = iso_from_epoch(created)

        w.writerow([oid, created_iso, drink, size, milk])

    # –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ bytes
    text = buf.getvalue()
    return text.encode("utf-8")