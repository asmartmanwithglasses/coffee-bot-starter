import math
import time
import asyncio
from contextlib import suppress
from typing import Dict, Tuple, Optional
from ..keyboards import undo_delete_kb
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest

UNDO_DEADLINE_SEC = 10
UNDO_BIN: Dict[Tuple[int, int], dict] = {}

def remember_deleted(*, user_id: int, order_id: int, item: dict,
                     index: int, chat_id: int, message_id: int) -> Tuple[Tuple[int, int], dict]:
    rec = {
        "item": item, "index": index,
        # —Å—Ç—Ä–æ–≥–∏–π –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –º–æ–Ω–æ—Ç–æ–Ω–∏—á–µ—Å–∫–∏—Ö —á–∞—Å–∞—Ö
        "deadline": time.monotonic() + UNDO_DEADLINE_SEC,
        "chat_id": chat_id, "message_id": message_id,
        "order_id": order_id,
    }
    key = (user_id, order_id)
    UNDO_BIN[key] = rec
    return key, rec


def get_pending(user_id: int, order_id: int) -> Optional[dict]:
    rec = UNDO_BIN.get((user_id, order_id))
    if not rec: return None
    # –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –≤—ã—à–µ–ª ‚Äî —Å—Ä–∞–∑—É —á–∏—Å—Ç–∏–º
    if rec["deadline"] <= time.monotonic():
        UNDO_BIN.pop((user_id, order_id), None)
        return None
    return rec


def seconds_left(rec: dict) -> int:
    # –æ–∫—Ä—É–≥–ª—è–µ–º ¬´–≤–≤–µ—Ä—Ö¬ª, –Ω–æ –ø–æ –º–æ–Ω–æ—Ç–æ–Ω–∏–∫—É –∏ –±–µ–∑ –ø—Ä—ã–∂–∫–æ–≤
    return max(0, math.ceil(rec["deadline"] - time.monotonic()))


def start_undo_countdown(bot: Bot, key: Tuple[int, int]) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–π –æ—Ç—Å—á—ë—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    asyncio.create_task(_countdown_loop(bot, key))


async def _countdown_loop(bot: Bot, key: Tuple[int, int]) -> None:
    """
    –ö–∞–∂–¥—ã–µ ~200 –º—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.
    –ü—Ä–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
    –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç.
    """
    last_shown = None
    while True:
        rec = UNDO_BIN.get(key)
        if not rec:
            return
        left = seconds_left(rec)
        if left <= 0:
            break
        if left != last_shown:
            with suppress(TelegramBadRequest):
                await bot.edit_message_reply_markup(
                chat_id=rec["chat_id"],
                message_id=rec["message_id"],
                reply_markup=undo_delete_kb(rec["order_id"], seconds_left=left),
            )
            last_shown = left

        await asyncio.sleep(0.2)

    rec = UNDO_BIN.pop(key, None)
    if not rec:
        return

    with suppress(TelegramBadRequest):
        await bot.edit_message_reply_markup(
            chat_id=rec["chat_id"],
            message_id=rec["message_id"],
            reply_markup=None,
        )
    with suppress(TelegramBadRequest):
        await bot.edit_message_text(
            chat_id=rec["chat_id"],
            message_id=rec["message_id"],
            text=f"üóë –ó–∞–∫–∞–∑ #{rec['order_id']} —É–¥–∞–ª—ë–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.",
            disable_web_page_preview=True,
        )