from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from .catalog import DRINKS

BTN_CANCEL = "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ üö´"


def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üßæ –ó–∞–∫–∞–∑"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üèÜ –¢–æ–ø")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç")],
        ],
        resize_keyboard=True,
    )


def drink_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Latte"), KeyboardButton(text="Cappuccino")],
            [KeyboardButton(text="Americano"), KeyboardButton(text="Flat White")],
            [KeyboardButton(text="Mocha")],
            [KeyboardButton(text=BTN_CANCEL)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def size_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Small"), KeyboardButton(text="Medium"), KeyboardButton(text="Large")],
            [KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥"), KeyboardButton(text=BTN_CANCEL)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def milk_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Yes"), KeyboardButton(text="No"), KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")],
            [KeyboardButton(text=BTN_CANCEL)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def resume_or_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton(text=BTN_CANCEL)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def history_actions_kb(order_id: int, display_no: int | None = None) -> InlineKeyboardMarkup:
    tag = f"‚Ññ{display_no}" if display_no is not None else f"#{order_id}"
    b1 = InlineKeyboardButton(text=f"üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å {tag}", callback_data=f"repeat:{order_id}")
    b2 = InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {tag}",  callback_data=f"delete:{order_id}")
    return InlineKeyboardMarkup(inline_keyboard=[[b1, b2]])


def confirm_delete_kb(order_id: int, display_no: int) -> InlineKeyboardMarkup:
    yes = InlineKeyboardButton(
        text=f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å ‚Ññ{display_no}",
        callback_data=f"delete_confirm:{order_id}",
    )
    cancel = InlineKeyboardButton(
        text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",
        callback_data=f"delete_cancel:{order_id}",
    )
    return InlineKeyboardMarkup(inline_keyboard=[[yes], [cancel]])


def history_filter_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text="‚òï –í—Å–µ", callback_data="history_filter:all")]]
    codes = list(DRINKS.items())
    for i in range(0, len(codes), 2):
        chunk = codes[i:i + 2]
        rows.append([
            InlineKeyboardButton(text=label, callback_data=f"history_filter:{code}")
            for code, label in chunk
        ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def history_more_kb(*, drink: str, offset: int, remain: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=f"–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë {remain}",
            callback_data=f"history_more:{drink}:{offset}",
        )
    ]])


def repeat_confirm_kb(order_id: int, display_no: int) -> InlineKeyboardMarkup:
    ok = InlineKeyboardButton(
        text=f"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞–∫ ‚Ññ{display_no}",
        callback_data=f"repeat_confirm:{order_id}",
    )
    cancel = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="repeat_cancel")
    return InlineKeyboardMarkup(inline_keyboard=[[ok], [cancel]])


def undo_delete_kb(order_id: int, *, seconds_left: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=f"‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å ({seconds_left})",
            callback_data=f"undo_delete:{order_id}",
        )
    ]])


def after_order_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ûï –ó–∞–∫–∞–∑–∞—Ç—å –µ—â—ë"), KeyboardButton(text="üè† –í –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def export_periods_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è",   callback_data="exp:p:today")],
        [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è",    callback_data="exp:p:week")],
        [InlineKeyboardButton(text="–ú–µ—Å—è—Ü",     callback_data="exp:p:month")],
        [InlineKeyboardButton(text="–í—Å—ë –≤—Ä–µ–º—è", callback_data="exp:p:all")],
    ])


def export_drink_kb(period: str) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text="‚òï –í—Å–µ", callback_data=f"exp:d:{period}:all")]]
    codes = list(DRINKS.items())
    for i in range(0, len(codes), 2):
        chunk = codes[i:i + 2]
        rows.append([
            InlineKeyboardButton(text=label, callback_data=f"exp:d:{period}:{code}")
            for code, label in chunk
        ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def top_periods_kb(active: str = "30d") -> InlineKeyboardMarkup:
    def lbl(code: str, text: str) -> str:
        return f"‚Ä¢ {text}" if code == active else text

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=lbl("week",  "–ù–µ–¥–µ–ª—è"),   callback_data="top:p:week"),
            InlineKeyboardButton(text=lbl("month", "–ú–µ—Å—è—Ü"),    callback_data="top:p:month"),
        ],
        [
            InlineKeyboardButton(text=lbl("30d",   "30 –¥–Ω–µ–π"),  callback_data="top:p:30d"),
            InlineKeyboardButton(text=lbl("all",   "–í—Å—ë –≤—Ä–µ–º—è"), callback_data="top:p:all"),
        ],
    ])
